---
import { getCollection } from 'astro:content';
import Layout from '../../../layouts/Layout.astro';
import Header from '../../../components/Header.astro';
import Footer from '../../../components/Footer.astro';
import { formatDate } from '../../../utils/date';
import { blogPosts, allTags as hardcodedTags } from '../../../data/blogPosts.js';

export async function getStaticPaths() {
  // Get content collection blog entries
  let blogEntries: any[] = [];
  try {
    blogEntries = await getCollection('blog', ({ data }) => {
      return import.meta.env.PROD ? !data.draft : true;
    });
  } catch (error) {
    console.error('Error loading blog collection:', error);
  }

  // Get all unique tags from both sources
  const collectionTags = [...new Set(blogEntries.flatMap(post => post.data.tags || []))];
  const combinedTags = [...new Set([...hardcodedTags, ...collectionTags])];

  // Create a path for each tag
  return combinedTags.map(tag => {
    // Filter content collection posts that have this tag
    const collectionPosts = blogEntries.filter(post =>
      post.data.tags && post.data.tags.includes(tag)
    ).sort((a, b) => {
      // Handle cases where pubDate might be undefined
      const dateA = a.data.pubDate ? new Date(a.data.pubDate).valueOf() : 0;
      const dateB = b.data.pubDate ? new Date(b.data.pubDate).valueOf() : 0;
      return dateB - dateA;
    });

    // Filter hardcoded posts that have this tag
    const hardcodedPosts = blogPosts.filter(post =>
      post.tags && post.tags.includes(tag)
    ).sort((a, b) => {
      const dateA = a.publishDate ? new Date(a.publishDate).valueOf() : 0;
      const dateB = b.publishDate ? new Date(b.publishDate).valueOf() : 0;
      return dateB - dateA;
    });

    return {
      params: { tag: tag.toLowerCase().replace(/\s+/g, '-') },
      props: {
        tag,
        collectionPosts,
        hardcodedPosts
      },
    };
  });
}

const { tag, collectionPosts, hardcodedPosts } = Astro.props;

// Get all unique tags from all posts for the sidebar
const allTags = [...hardcodedTags].sort();
---

<Layout
  title={`${tag} - Blog | AI Native Digital Agency`}
  description={`Articles and insights about ${tag} from our expert team.`}
>
  <Header />

  <main>
    <!-- Page Header -->
    <section class="pt-32 pb-12 md:pt-40 md:pb-20 bg-gray-50 dark:bg-gray-800">
      <div class="container mx-auto px-4 sm:px-6 lg:px-8">
        <div class="max-w-4xl mx-auto text-center">
          <h1 class="text-4xl md:text-5xl font-bold text-gray-900 dark:text-white mb-6">
            #{tag}
          </h1>
          <p class="text-xl text-gray-600 dark:text-gray-400">
            Articles and insights about {tag} from our expert team.
          </p>
        </div>
      </div>
    </section>

    <!-- Blog Posts -->
    <section class="py-16 md:py-24 bg-white dark:bg-gray-900">
      <div class="container mx-auto px-4 sm:px-6 lg:px-8">
        <!-- Featured Cards and Sidebar in same row -->
        <div class="flex flex-col lg:flex-row gap-12 mb-16">
          <!-- Featured Cards (2) -->
          <div class="lg:w-2/3">
            <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-6 flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" class="size-6 mr-2 text-blue-500 dark:text-blue-400" viewBox="0 0 20 20" fill="currentColor">
                <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
              </svg>
              Featured {tag} Articles
            </h2>
            {hardcodedPosts.length > 0 || collectionPosts.length > 0 ? (
              <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
                {/* Render first 2 posts (either hardcoded or collection) */}
                {[...hardcodedPosts, ...collectionPosts].slice(0, 2).map((post) => {
                  // Determine if this is a hardcoded post or a collection post
                  const isHardcoded = 'publishDate' in post;
                  const title = isHardcoded ? post.title : post.data.title;
                  const slug = post.slug;
                  const image = isHardcoded ? post.image : post.data.image;
                  const date = isHardcoded ? post.publishDate : post.data.pubDate;
                  const author = isHardcoded ? post.author : post.data.author;
                  const excerpt = isHardcoded ? post.excerpt : post.data.description;
                  const tags = isHardcoded ? post.tags : post.data.tags;

                  return (
                  <article class="group relative bg-slate-100 dark:bg-gray-800 rounded-xl overflow-hidden border border-slate-200 dark:border-gray-700 hover:border-blue-200 dark:hover:border-blue-800 transition-all shadow-card hover:shadow-blue-glow-soft dark:hover:shadow-dark-blue-glow-soft">
                    <a href={`/blog/${slug}`} class="block h-48 overflow-hidden">
                      {image ? (
                        <img
                          src={image}
                          alt={title}
                          class="w-full h-full object-cover transition-transform duration-500 group-hover:scale-105"
                        />
                      ) : (
                        <div class="w-full h-full bg-gray-300 dark:bg-gray-700 flex items-center justify-center">
                          <svg xmlns="http://www.w3.org/2000/svg" class="h-16 w-16 text-gray-500 dark:text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M19 20H5a2 2 0 01-2-2V6a2 2 0 012-2h10a2 2 0 012 2v1M19 20a2 2 0 002-2V8a2 2 0 00-2-2h-5M8 12h8M8 16h4" />
                          </svg>
                        </div>
                      )}
                    </a>

                    <div class="p-6">
                      <div class="flex items-center text-sm text-gray-500 dark:text-gray-400 mb-2">
                        <span>{formatDate(date)}</span>
                        <span class="mx-2">â€¢</span>
                        <span>{author}</span>
                      </div>

                      <h2 class="text-xl font-bold text-gray-900 dark:text-white mb-3">
                        <a href={`/blog/${slug}`} class="hover:text-blue-600 dark:hover:text-blue-400 transition-colors">
                          {title}
                        </a>
                      </h2>

                      <p class="text-gray-600 dark:text-gray-400 mb-4 line-clamp-2">
                        {excerpt}
                      </p>

                      <div class="flex flex-wrap gap-2 mb-4">
                        {tags && tags.map((postTag: string) => (
                          <a
                            href={`/blog/tag/${postTag.toLowerCase().replace(/\s+/g, '-')}`}
                            class={`px-2 py-1 bg-blue-50 dark:bg-blue-900/30 rounded-full text-xs hover:bg-blue-100 dark:hover:bg-blue-800/50 transition-colors ${postTag === tag ? 'text-blue-600 dark:text-blue-400 font-medium' : 'text-gray-600 dark:text-gray-400'}`}
                          >
                            #{postTag}
                          </a>
                        ))}
                      </div>

                      <a
                        href={`/blog/${slug}`}
                        class="inline-flex items-center text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 font-medium group"
                      >
                        Read Article
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-1 transition-transform group-hover:translate-x-1" viewBox="0 0 20 20" fill="currentColor">
                          <path fill-rule="evenodd" d="M12.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-2.293-2.293a1 1 0 010-1.414z" clip-rule="evenodd" />
                        </svg>
                      </a>
                    </div>
                  </article>
                  );
                })}
              </div>
            ) : (
              <div class="text-center py-12 bg-slate-100 dark:bg-gray-800 rounded-xl border border-slate-200 dark:border-gray-700 p-6">
                <h3 class="text-xl font-medium text-gray-900 dark:text-white mb-4">No posts found</h3>
                <p class="text-gray-600 dark:text-gray-400">There are no posts with this tag yet. Check back later!</p>
              </div>
            )}
          </div>

          <!-- Sidebar -->
          <div class="lg:w-1/3 space-y-8">
            <!-- Search -->
            <div class="bg-slate-100 dark:bg-gray-800 rounded-xl border border-slate-200 dark:border-gray-700 p-6 shadow-card hover:shadow-blue-glow-soft dark:hover:shadow-dark-blue-glow-soft transition-all duration-300">
              <h3 class="text-lg font-bold text-gray-900 dark:text-white mb-4 flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="size-5 mr-2 text-blue-500 dark:text-blue-400" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd" />
                </svg>
                Search
              </h3>
              <form>
                <div class="flex">
                  <input
                    type="text"
                    placeholder="Search articles..."
                    class="flex-1 min-w-0 px-4 py-2 text-gray-900 dark:text-white bg-white dark:bg-gray-700 border border-gray-200 dark:border-gray-600 rounded-l-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors duration-300"
                  />
                  <button
                    type="submit"
                    class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-r-lg text-white bg-gradient-blue dark:bg-gradient-blue-dark hover:shadow-blue-glow transition-all duration-300"
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                      <path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd" />
                    </svg>
                  </button>
                </div>
              </form>
            </div>

            <!-- Categories -->
            <div class="bg-slate-100 dark:bg-gray-800 rounded-xl border border-slate-200 dark:border-gray-700 p-6 shadow-card hover:shadow-blue-glow-soft dark:hover:shadow-dark-blue-glow-soft transition-all duration-300">
              <h3 class="text-lg font-bold text-gray-900 dark:text-white mb-4 flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="size-5 mr-2 text-blue-500 dark:text-blue-400" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M17.707 9.293a1 1 0 010 1.414l-7 7a1 1 0 01-1.414 0l-7-7A.997.997 0 012 10V5a3 3 0 013-3h5c.256 0 .512.098.707.293l7 7zM5 6a1 1 0 100-2 1 1 0 000 2z" clip-rule="evenodd" />
                </svg>
                Categories
              </h3>
              <div class="max-h-[300px] overflow-y-auto pr-2 scrollbar-thin scrollbar-thumb-gray-300 dark:scrollbar-thumb-gray-600 scrollbar-track-transparent rounded-lg">
                <ul class="space-y-3">
                  {allTags.map((tagItem) => (
                    <li>
                      <a
                        href={`/blog/tag/${tagItem.toLowerCase().replace(/\s+/g, '-')}`}
                        class:list={[
                          "flex items-center justify-between py-2 px-3 rounded-lg hover:bg-blue-50 dark:hover:bg-blue-900/20 transition-colors duration-300 group",
                          tagItem === tag
                            ? "bg-blue-50 dark:bg-blue-900/20 text-blue-600 dark:text-blue-400 font-medium"
                            : "text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400"
                        ]}
                      >
                        <span class="group-hover:translate-x-1 transition-transform">#{tagItem}</span>
                        <span class="bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-400 px-2 py-1 rounded-full text-xs group-hover:bg-blue-100 dark:group-hover:bg-blue-900/30 group-hover:text-blue-700 dark:group-hover:text-blue-300 transition-colors duration-300">
                          {blogPosts.filter(post => post.tags && post.tags.includes(tagItem)).length}
                        </span>
                      </a>
                    </li>
                  ))}
                </ul>
              </div>
            </div>
          </div>
        </div>

        {/* Scrollable Numbered Articles (if there are more than 2 posts) */}
        {[...hardcodedPosts, ...collectionPosts].length > 2 && (
          <div>
            <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-6 flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" class="size-6 mr-2 text-blue-500 dark:text-blue-400" viewBox="0 0 20 20" fill="currentColor">
                <path d="M7 3a1 1 0 000 2h6a1 1 0 100-2H7zM4 7a1 1 0 011-1h10a1 1 0 110 2H5a1 1 0 01-1-1zM2 11a2 2 0 012-2h12a2 2 0 012 2v4a2 2 0 01-2 2H4a2 2 0 01-2-2v-4z" />
              </svg>
              All {tag} Articles
            </h2>

            <div class="max-h-[280px] overflow-y-auto pr-4 scrollbar-thin scrollbar-thumb-gray-300 dark:scrollbar-thumb-gray-600 scrollbar-track-transparent rounded-xl">
              <div class="space-y-6">
                {[...hardcodedPosts, ...collectionPosts].slice(2).map((post, index) => {
                  // Determine if this is a hardcoded post or a collection post
                  const isHardcoded = 'publishDate' in post;
                  const title = isHardcoded ? post.title : post.data.title;
                  const slug = post.slug;
                  const date = isHardcoded ? post.publishDate : post.data.pubDate;
                  const author = isHardcoded ? post.author : post.data.author;
                  const excerpt = isHardcoded ? post.excerpt : post.data.description;
                  const tags = isHardcoded ? post.tags : post.data.tags;

                  return (
                    <article class="group flex gap-4 bg-slate-100 dark:bg-gray-800 rounded-xl overflow-hidden border border-slate-200 dark:border-gray-700 hover:border-blue-200 dark:hover:border-blue-800 transition-all shadow-card hover:shadow-blue-glow p-4">
                      <div class="flex-shrink-0 flex items-center justify-center size-12 bg-blue-100 dark:bg-blue-900/30 rounded-full text-blue-600 dark:text-blue-400 font-bold">
                        {index + 3}
                      </div>

                      <div class="flex-grow">
                        <div class="flex items-center text-sm text-gray-500 dark:text-gray-400 mb-1">
                          <span class="font-medium">{formatDate(date)}</span>
                          <span class="mx-2">â€¢</span>
                          <span class="italic">{author}</span>
                        </div>

                        <h3 class="text-lg font-bold text-gray-900 dark:text-white mb-2 group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors duration-300">
                          <a href={`/blog/${slug}`}>
                            {title}
                          </a>
                        </h3>

                        <p class="text-gray-600 dark:text-gray-400 mb-3 line-clamp-2 text-sm">
                          {excerpt}
                        </p>

                        <div class="flex flex-wrap gap-2">
                          {tags && tags.slice(0, 2).map((postTag: string) => (
                            <a
                              href={`/blog/tag/${postTag.toLowerCase().replace(/\s+/g, '-')}`}
                              class={`px-2 py-1 bg-blue-50 dark:bg-blue-900/30 rounded-full text-xs hover:bg-blue-100 dark:hover:bg-blue-800/50 transition-colors duration-300 ${postTag === tag ? 'text-blue-600 dark:text-blue-400 font-medium' : 'text-gray-600 dark:text-gray-400'}`}
                            >
                              #{postTag}
                            </a>
                          ))}
                          {tags && tags.length > 2 && (
                            <span class="px-2 py-1 bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-400 rounded-full text-xs">
                              +{tags.length - 2}
                            </span>
                          )}
                        </div>
                      </div>

                      <div class="flex-shrink-0 self-center">
                        <a
                          href={`/blog/${slug}`}
                          class="inline-flex items-center justify-center size-10 rounded-full bg-white dark:bg-gray-700 text-blue-600 dark:text-blue-400 hover:bg-blue-50 dark:hover:bg-blue-900/20 transition-colors duration-300"
                          aria-label="Read article"
                        >
                          <svg xmlns="http://www.w3.org/2000/svg" class="size-5" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
                          </svg>
                        </a>
                      </div>
                    </article>
                  );
                })}
              </div>
            </div>
          </div>
        )}
      </div>
    </section>
  </main>

  <Footer />
</Layout>

<style>
  /* Prevent shadow on blog card images in dark mode */
  .dark article.group:hover img,
  .dark div.group:hover img {
    filter: none !important;
    box-shadow: none !important;
  }

  /* Custom shadow for blog cards */
  .shadow-blue-glow-soft {
    box-shadow: 0 0 8px rgba(59, 130, 246, 0.3);
  }

  .dark .shadow-dark-blue-glow-soft {
    box-shadow: 0 0 8px rgba(59, 130, 246, 0.2);
  }
</style>
