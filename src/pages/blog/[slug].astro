---
import { getCollection } from 'astro:content';
import ArticleLayout from '../../layouts/ArticleLayout.astro';
import { blogPosts } from '../../data/blogPosts.js';

export async function getStaticPaths() {
  // Try to get blog entries from content collection
  let contentEntries : any = [];
  try {
    contentEntries = await getCollection('blog', ({ data }) => {
      return import.meta.env.PROD ? !data.draft : true;
    });
  } catch (error) {
    console.error('Error loading blog collection:', error);
  }

  // Create paths from content collection
  const contentPaths = contentEntries.map((entry:any) => ({
    params: { slug: entry.slug },
    props: { entry, type: 'collection' },
  }));

  // Create paths from imported blog posts
  const hardcodedPaths = blogPosts.map(post => ({
    params: { slug: post.slug },
    props: { post, type: 'hardcoded' },
  }));

  // Combine both sources
  return [...hardcodedPaths, ...contentPaths];
}

// Get the post data based on the slug
const { slug } = Astro.params;
const { type, entry, post } = Astro.props;

// Default values
let title = '';
let description = '';
let content = '';
let publishDate = '';
let author = '';
let image = '';
let tags = [];
let ContentComponent: any = null;

// Set the data based on the source type
if (type === 'collection' && entry) {
  // Content collection entry
  const rendered = await entry.render();
  ContentComponent = rendered.Content;
  title = entry.data.title;
  description = entry.data.description;
  publishDate = entry.data.pubDate.toISOString().split('T')[0]; // Format date
  author = entry.data.author;
  image = entry.data.image;
  tags = entry.data.tags;
} else if (type === 'hardcoded' && post) {
  // Hardcoded blog post
  title = post.title;
  description = post.excerpt;
  content = post.content;
  publishDate = post.publishDate;
  author = post.author;
  image = post.image;
  tags = post.tags;
}
---

<ArticleLayout frontmatter={{
  title,
  description,
  publishDate,
  author,
  image,
  tags
}} slug={slug}>
  {type === 'collection' ? (
    ContentComponent && (
      <div class="article-content">
        <ContentComponent />
      </div>
    )
  ) : (
    <div class="article-content" set:html={content} />
  )}
</ArticleLayout>
