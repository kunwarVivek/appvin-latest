---
import { getCollection } from 'astro:content';
import ArticleLayout from '../../layouts/ArticleLayout.astro';
import { blogPosts } from '../../data/blogPosts.js';

export async function getStaticPaths() {
  // Try to get blog entries from content collection
  let contentEntries = [];
  try {
    contentEntries = await getCollection('blog', ({ data }) => {
      return import.meta.env.PROD ? !data.draft : true;
    });
  } catch (error) {
    console.error('Error loading blog collection:', error);
  }

  // Create paths from content collection
  const contentPaths = contentEntries.map(entry => ({
    params: { slug: entry.slug },
    props: { entry, type: 'collection' },
  }));

  // Create paths from imported blog posts
  const hardcodedPaths = blogPosts.map(post => ({
    params: { slug: post.slug },
    props: { post, type: 'hardcoded' },
  }));

  // Combine both sources
  return [...hardcodedPaths, ...contentPaths];
}

const { type } = Astro.props;
let title, description, content, publishDate, updatedDate, author, image, tags, slug;

if (type === 'collection') {
  const { entry } = Astro.props;
  const { Content } = await entry.render();

  title = entry.data.title;
  description = entry.data.description;
  content = Content;
  publishDate = entry.data.pubDate;
  updatedDate = entry.data.updatedDate;
  author = entry.data.author;
  image = entry.data.image;
  tags = entry.data.tags;
  slug = entry.slug;
} else {
  const { post } = Astro.props;

  title = post.title;
  description = post.excerpt;
  content = post.content;
  publishDate = post.publishDate;
  author = post.author;
  image = post.image;
  tags = post.tags;
  slug = post.slug;
}
---

<ArticleLayout frontmatter={{
  title,
  description,
  publishDate,
  author,
  image,
  tags
}} slug={slug}>
  {type === 'collection' ? (
    <content />
  ) : (
    <div set:html={content} />
  )}
</ArticleLayout>
