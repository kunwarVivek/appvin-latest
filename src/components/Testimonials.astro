---
import { getCollection } from 'astro:content';

// Get all testimonials from the content collection
const testimonialsCollection = await getCollection('testimonials');

// Get featured testimonials first, then fill with non-featured if needed
let featuredTestimonials = testimonialsCollection.filter(testimonial => testimonial.data.featured);

// If we have more than 4 featured testimonials, take only the first 4
if (featuredTestimonials.length > 4) {
  featuredTestimonials = featuredTestimonials.slice(0, 4);
}
// If we have less than 4 featured testimonials, add non-featured ones
else if (featuredTestimonials.length < 4) {
  const nonFeaturedTestimonials = testimonialsCollection
    .filter(testimonial => !testimonial.data.featured)
    .slice(0, 4 - featuredTestimonials.length);

  featuredTestimonials = [...featuredTestimonials, ...nonFeaturedTestimonials];
}

// Map the testimonials to the format needed by the component
const testimonials = featuredTestimonials.map(testimonial => ({
  quote: testimonial.data.quote,
  author: testimonial.data.author,
  title: `${testimonial.data.title}, ${testimonial.data.company}`,
  image: testimonial.data.image || "/images/testimonial-placeholder.jpg"
}));
---

<section id="testimonials" class="py-20 bg-white dark:bg-gray-900 relative overflow-hidden">
  <!-- Background pattern -->
  <div class="absolute inset-0 bg-grid-pattern opacity-5 dark:opacity-3"></div>

  <!-- Decorative elements -->
  <div class="absolute top-1/3 -left-20 size-96 bg-primary-100 dark:bg-primary-900/20 rounded-full opacity-30 blur-3xl"></div>
  <div class="absolute bottom-1/3 -right-20 size-96 bg-secondary-100 dark:bg-secondary-900/20 rounded-full opacity-30 blur-3xl"></div>

  <div class="container mx-auto px-4 sm:px-6 lg:px-8 relative z-10">
    <div class="text-center max-w-3xl mx-auto mb-20">
      <!-- Section label -->
      <div class="inline-flex items-center px-3 py-1 mb-4 text-xs font-medium rounded-full bg-primary-100 text-primary-800 dark:bg-primary-900/30 dark:text-primary-300">
        <span class="size-2 bg-primary-500 rounded-full mr-2"></span>
        Client Testimonials
      </div>

      <h2 class="text-3xl md:text-4xl font-bold text-gray-900 dark:text-white mb-6 tracking-tight">
        <span class="gradient-text">Trusted</span> by Industry Leaders
      </h2>

      <div class="w-20 h-1 bg-gradient-to-r from-primary-500 to-secondary-500 mx-auto mb-6 rounded-full"></div>

      <p class="text-xl text-gray-600 dark:text-gray-400 leading-relaxed">
        Our clients achieve exceptional business outcomes through our AI-powered solutions. Here's what they have to say.
      </p>
    </div>

    <!-- Testimonial carousel -->
    <div class="relative testimonial-carousel">
      <!-- Carousel container -->
      <div class="overflow-hidden">
        <div class="flex transition-transform duration-500 ease-in-out testimonial-track">
          {testimonials.map((testimonial, index) => (
            <div class="w-full md:w-1/2 lg:w-1/2 flex-shrink-0 px-4" data-index={index}>
              <div class="bg-white dark:bg-gray-800 p-8 rounded-xl shadow-md hover:shadow-lg transition-all duration-300 border border-gray-100 dark:border-gray-700 h-full flex flex-col">
                <!-- Quote icon and rating -->
                <div class="flex items-center justify-between mb-6">
                  <div class="text-primary-600 dark:text-primary-400">
                    <svg xmlns="http://www.w3.org/2000/svg" class="size-10" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M14.017 21v-7.391c0-5.704 3.731-9.57 8.983-10.609l.995 2.151c-2.432.917-3.995 3.638-3.995 5.849h4v10h-9.983zm-14.017 0v-7.391c0-5.704 3.748-9.57 9-10.609l.996 2.151c-2.433.917-3.996 3.638-3.996 5.849h3.983v10h-9.983z" />
                    </svg>
                  </div>

                  <!-- Star rating -->
                  <div class="flex">
                    {Array(5).fill(0).map((_, i) => (
                      <svg xmlns="http://www.w3.org/2000/svg" class="size-5 text-yellow-400" viewBox="0 0 20 20" fill="currentColor">
                        <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                      </svg>
                    ))}
                  </div>
                </div>

                <!-- Quote text -->
                <blockquote class="text-gray-600 dark:text-gray-300 text-lg italic mb-8 flex-grow">
                  "{testimonial.quote}"
                </blockquote>

                <!-- Author info -->
                <div class="flex items-center mt-auto">
                  <div class="size-12 rounded-full bg-gray-200 dark:bg-gray-700 overflow-hidden flex-shrink-0">
                    <div class="flex items-center justify-center h-full text-gray-500 dark:text-gray-400">
                      <svg xmlns="http://www.w3.org/2000/svg" class="size-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                      </svg>
                    </div>
                  </div>
                  <div class="ml-4">
                    <div class="font-bold text-gray-900 dark:text-white">
                      {testimonial.author}
                    </div>
                    <div class="text-gray-500 dark:text-gray-400 text-sm">
                      {testimonial.title}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      <!-- Navigation buttons -->
      <button class="absolute top-1/2 -left-4 transform -translate-y-1/2 bg-white dark:bg-gray-800 size-10 rounded-full shadow-md flex items-center justify-center text-gray-600 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 focus:outline-none carousel-prev">
        <svg xmlns="http://www.w3.org/2000/svg" class="size-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
        </svg>
      </button>
      <button class="absolute top-1/2 -right-4 transform -translate-y-1/2 bg-white dark:bg-gray-800 size-10 rounded-full shadow-md flex items-center justify-center text-gray-600 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 focus:outline-none carousel-next">
        <svg xmlns="http://www.w3.org/2000/svg" class="size-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
        </svg>
      </button>

      <!-- Indicators -->
      <div class="flex justify-center mt-8 carousel-indicators">
        {testimonials.map((_, index) => (
          <button class={`size-3 rounded-full mx-1 bg-gray-300 dark:bg-gray-700 hover:bg-primary-500 dark:hover:bg-primary-500 focus:outline-none transition-colors duration-200 ${index === 0 ? 'bg-primary-500 dark:bg-primary-500' : ''}`} data-index={index}></button>
        ))}
      </div>
    </div>

    <!-- Logos of companies -->
    <div class="mt-20">
      <div class="flex items-center justify-center mb-8">
        <div class="h-px w-16 bg-gray-300 dark:bg-gray-700"></div>
        <p class="text-sm uppercase text-gray-500 dark:text-gray-400 font-medium mx-4">Trusted by companies worldwide</p>
        <div class="h-px w-16 bg-gray-300 dark:bg-gray-700"></div>
      </div>

      <div class="flex flex-wrap justify-center items-center gap-x-12 gap-y-8">
        {Array(5).fill(0).map((_, i) => (
          <div class="size-12 opacity-60 hover:opacity-100 transition-all duration-300 interactive">
            <svg class="size-full text-gray-400 dark:text-gray-500" viewBox="0 0 24 24" fill="currentColor">
              <path d={[
                "M12 0C5.373 0 0 5.373 0 12s5.373 12 12 12 12-5.373 12-12S18.627 0 12 0zm0 22c-5.523 0-10-4.477-10-10S6.477 2 12 2s10 4.477 10 10-4.477 10-10 10z",
                "M24 12c0 6.627-5.373 12-12 12S0 18.627 0 12 5.373 0 12 0s12 5.373 12 12zm-12 8a8 8 0 100-16 8 8 0 000 16z",
                "M12 0L0 12l12 12 12-12L12 0zm0 18l-6-6 6-6 6 6-6 6z",
                "M24 7H0v10h24V7zm-2 8H2V9h20v6z",
                "M12 0L6 12l6 12 6-12-6-12zm0 18l-3-6 3-6 3 6-3 6z"
              ][i]} />
            </svg>
          </div>
        ))}
      </div>
    </div>
  </div>
</section>

<style>
  .bg-grid-pattern {
    background-image: url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%239C92AC' fill-opacity='0.2'%3E%3Cpath d='M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E");
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const track = document.querySelector('.testimonial-track');
    const slides = Array.from(track.children);
    const nextButton = document.querySelector('.carousel-next');
    const prevButton = document.querySelector('.carousel-prev');
    const indicators = document.querySelectorAll('.carousel-indicators button');

    let currentIndex = 0;
    const slideWidth = slides[0].getBoundingClientRect().width;

    // Set initial position
    const setSlidePosition = (slide, index) => {
      slide.style.transform = `translateX(${index * slideWidth}px)`;
    };

    // Arrange slides next to each other
    slides.forEach(setSlidePosition);

    // Move to slide
    const moveToSlide = (targetIndex) => {
      if (targetIndex < 0) targetIndex = slides.length - 1;
      if (targetIndex >= slides.length) targetIndex = 0;

      // Update current index
      currentIndex = targetIndex;

      // Move to the target slide
      track.style.transform = `translateX(-${currentIndex * slideWidth}px)`;

      // Update indicators
      indicators.forEach((indicator, index) => {
        if (index === currentIndex) {
          indicator.classList.add('bg-primary-500', 'dark:bg-primary-500');
        } else {
          indicator.classList.remove('bg-primary-500', 'dark:bg-primary-500');
        }
      });
    };

    // Next button click
    nextButton.addEventListener('click', () => {
      moveToSlide(currentIndex + 1);
    });

    // Previous button click
    prevButton.addEventListener('click', () => {
      moveToSlide(currentIndex - 1);
    });

    // Indicator clicks
    indicators.forEach((indicator, index) => {
      indicator.addEventListener('click', () => {
        moveToSlide(index);
      });
    });

    // Auto-advance slides every 5 seconds
    setInterval(() => {
      moveToSlide(currentIndex + 1);
    }, 5000);
  });
</script>
