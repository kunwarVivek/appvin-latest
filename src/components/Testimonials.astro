---
import { getCollection } from 'astro:content';

// Get all testimonials from the content collection
const testimonialsCollection = await getCollection('testimonials');

// Defensive: filter out any entries without required fields
const filteredTestimonials = testimonialsCollection.filter(t => t.data && t.data.name && t.body);

// Sort testimonials by order if available
const sortedTestimonials = filteredTestimonials.sort((a, b) => {
  const aOrder = typeof a.data.order === 'number' ? a.data.order : 0;
  const bOrder = typeof b.data.order === 'number' ? b.data.order : 0;
  if (aOrder !== bOrder) return aOrder - bOrder;
  return a.data.name.localeCompare(b.data.name);
});

// Take the first 4 testimonials
const featuredTestimonials = sortedTestimonials.slice(0, 4);

// Map the testimonials to the format needed by the component
const testimonials = featuredTestimonials.map(testimonial => ({
  quote: testimonial.body,
  author: testimonial.data.name,
  title: testimonial.data.company ? `${testimonial.data.position}, ${testimonial.data.company}` : testimonial.data.position,
  image: testimonial.data.image || "/images/testimonial-placeholder.jpg"
}));
---

<section id="testimonials" class="py-20 bg-white dark:bg-gray-900 relative overflow-hidden">
  <!-- Background pattern -->
  <div class="absolute inset-0 bg-grid-pattern opacity-5 dark:opacity-3"></div>

  <!-- Decorative elements -->
  <div class="absolute top-1/3 -left-20 size-96 bg-primary-100 dark:bg-primary-900/20 rounded-full opacity-30 blur-3xl"></div>
  <div class="absolute bottom-1/3 -right-20 size-96 bg-secondary-100 dark:bg-secondary-900/20 rounded-full opacity-30 blur-3xl"></div>

  <div class="container mx-auto px-4 sm:px-6 lg:px-8 relative z-10">
    <div class="text-center max-w-3xl mx-auto mb-20">
      <!-- Section label -->
      <div class="inline-flex items-center px-3 py-1 mb-4 text-xs font-medium rounded-full bg-primary-100 text-primary-800 dark:bg-primary-900/30 dark:text-primary-300">
        <span class="size-2 bg-primary-500 rounded-full mr-2"></span>
        Client Testimonials
      </div>

      <h2 class="text-3xl md:text-4xl font-bold text-gray-900 dark:text-white mb-6 tracking-tight">
        <span class="gradient-text">Trusted</span> by Industry Leaders
      </h2>

      <div class="w-20 h-1 bg-gradient-to-r from-primary-500 to-secondary-500 mx-auto mb-6 rounded-full"></div>

      <p class="section-subtitle text-xl md:text-2xl text-accent-700 dark:text-accent-300 font-medium max-w-2xl mx-auto text-center mb-12 leading-relaxed drop-shadow">
        Our clients achieve exceptional business outcomes through our AI-powered solutions. Here's what they have to say.
      </p>
    </div>

    <!-- Testimonial carousel -->
    <div class="relative testimonial-carousel">
      <div class="overflow-hidden">
        <div class="flex transition-transform duration-500 ease-in-out testimonial-track" style="will-change: transform;">
          {testimonials.map((testimonial) => (
            <div class="w-full md:w-1/2 lg:w-1/2 flex-shrink-0 px-4" style="min-width: 50%; max-width: 50%;">
              <div class="testimonial-card bg-gradient-to-br from-white to-gray-50 dark:from-gray-900 dark:to-gray-800 p-10 rounded-2xl shadow-xl border border-primary-100 dark:border-primary-800 h-full flex flex-col">
                <div class="flex items-center mb-6">
                  <div class="text-primary-600 dark:text-primary-400 mr-4">
                    <svg xmlns="http://www.w3.org/2000/svg" class="size-10" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M6.5 10c-.223 0-.437.034-.65.065.069-.232.14-.468.254-.68.114-.308.292-.575.469-.844.148-.291.409-.488.601-.737.201-.242.475-.403.692-.604.213-.21.492-.315.714-.463.232-.133.434-.28.65-.35.208-.086.39-.16.539-.222.302-.125.474-.197.474-.197L9.758 4.03c0 0-.218.052-.597.144C8.97 4.222 8.737 4.278 8.472 4.345c-.271.05-.56.187-.882.312C7.272 4.799 6.904 4.895 6.562 5.123c-.344.218-.741.4-1.091.692C5.132 6.116 4.723 6.377 4.421 6.76c-.33.358-.656.734-.909 1.162C3.219 8.33 3.02 8.778 2.81 9.221c-.19.443-.343.896-.468 1.336-.237.882-.343 1.72-.384 2.437-.034.718-.014 1.315.028 1.747.015.204.043.402.063.539.017.109.025.168.025.168l.026-.006C2.535 17.474 4.338 19 6.5 19c2.485 0 4.5-2.015 4.5-4.5S8.985 10 6.5 10zM17.5 10c-.223 0-.437.034-.65.065.069-.232.14-.468.254-.68.114-.308.292-.575.469-.844.148-.291.409-.488.601-.737.201-.242.475-.403.692-.604.213-.21.492-.315.714-.463.232-.133.434-.28.65-.35.208-.086.39-.16.539-.222.302-.125.474-.197.474-.197L20.758 4.03c0 0-.218.052-.597.144-.191.048-.424.104-.689.171-.271.05-.56.187-.882.312-.317.143-.686.238-1.028.467-.344.218-.741.4-1.091.692-.339.301-.748.562-1.05.944-.33.358-.656.734-.909 1.162C14.219 8.33 14.02 8.778 13.81 9.221c-.19.443-.343.896-.468 1.336-.237.882-.343 1.72-.384 2.437-.034.718-.014 1.315.028 1.747.015.204.043.402.063.539.017.109.025.168.025.168l.026-.006C13.535 17.474 15.338 19 17.5 19c2.485 0 4.5-2.015 4.5-4.5S19.985 10 17.5 10z" />
                    </svg>
                  </div>
                  <div class="flex gap-1">
                    {Array(5).fill(0).map(() => (
                      <svg xmlns="http://www.w3.org/2000/svg" class="size-5 text-yellow-400" viewBox="0 0 20 20" fill="currentColor">
                        <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                    </svg>
                    ))}
                  </div>
                </div>
                <blockquote class="testimonial-text text-lg italic text-gray-700 dark:text-gray-300 mb-8 flex-grow">
                  "{testimonial.quote}"
                </blockquote>
                <div class="flex items-center mt-auto">
                  <div class="ml-0 text-left">
                    <div class="testimonial-author font-bold text-gray-900 dark:text-white">
                      {testimonial.author}
                    </div>
                    <div class="testimonial-position text-sm text-gray-500 dark:text-gray-400">
                      {testimonial.title}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      <!-- Navigation buttons -->
      <button class="absolute top-1/2 -left-4 transform -translate-y-1/2 bg-white dark:bg-gray-800 size-10 rounded-full shadow-md flex items-center justify-center text-gray-600 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 focus:outline-none carousel-prev">
        <svg xmlns="http://www.w3.org/2000/svg" class="size-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
        </svg>
      </button>
      <button class="absolute top-1/2 -right-4 transform -translate-y-1/2 bg-white dark:bg-gray-800 size-10 rounded-full shadow-md flex items-center justify-center text-gray-600 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 focus:outline-none carousel-next">
        <svg xmlns="http://www.w3.org/2000/svg" class="size-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
        </svg>
      </button>

      <!-- Indicators -->
      <div class="flex justify-center mt-8 carousel-indicators">
        {testimonials.map((_, index) => (
          <button class={`size-3 rounded-full mx-1 bg-gray-300 dark:bg-gray-700 hover:bg-primary-500 dark:hover:bg-primary-500 focus:outline-none transition-colors duration-200 ${index === 0 ? 'bg-primary-500 dark:bg-primary-500' : ''}`} data-index={index}></button>
        ))}
      </div>
    </div>

    <!-- Logos of companies -->
    <div class="mt-20">
      <div class="flex items-center justify-center mb-8">
        <div class="h-px w-16 bg-gray-300 dark:bg-gray-700"></div>
        <p class="text-sm uppercase text-gray-500 dark:text-gray-400 font-medium mx-4">Trusted by companies worldwide</p>
        <div class="h-px w-16 bg-gray-300 dark:bg-gray-700"></div>
      </div>

      <div class="flex flex-wrap justify-center items-center gap-x-12 gap-y-8">
        {Array(5).fill(0).map((_, i) => (
          <div class="size-12 opacity-60 hover:opacity-100 transition-all duration-300 interactive">
            <svg class="size-full text-gray-400 dark:text-gray-500" viewBox="0 0 24 24" fill="currentColor">
              <path d={[
                "M12 0C5.373 0 0 5.373 0 12s5.373 12 12 12 12-5.373 12-12S18.627 0 12 0zm0 22c-5.523 0-10-4.477-10-10S6.477 2 12 2s10 4.477 10 10-4.477 10-10 10z",
                "M24 12c0 6.627-5.373 12-12 12S0 18.627 0 12 5.373 0 12 0s12 5.373 12 12zm-12 8a8 8 0 100-16 8 8 0 000 16z",
                "M12 0L0 12l12 12 12-12L12 0zm0 18l-6-6 6-6 6 6-6 6z",
                "M24 7H0v10h24V7zm-2 8H2V9h20v6z",
                "M12 0L6 12l6 12 6-12-6-12zm0 18l-3-6 3-6 3 6-3 6z"
              ][i]} />
            </svg>
          </div>
        ))}
      </div>
    </div>
  </div>
</section>

<style>
  .bg-grid-pattern {
    background-image: url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%239C92AC' fill-opacity='0.2'%3E%3Cpath d='M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E");
  }
</style>

<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    const track = document.querySelector('.testimonial-track');

    // Early return if track element doesn't exist
    if (!track) {
      console.error('Testimonial track element not found');
      return;
    }

    const slides = Array.from(track.children);
    const nextButton = document.querySelector('.carousel-next');
    const prevButton = document.querySelector('.carousel-prev');
    const indicators = document.querySelectorAll('.carousel-indicators button');

    let currentIndex = 0;
    const visibleSlides = 2;

    function updateCarousel() {
      if (!track || slides.length === 0) return;

      const slideWidth = slides[0].getBoundingClientRect().width;
      // Use proper JavaScript type checking and casting
      if (track instanceof HTMLElement) {
        track.style.transform = `translateX(-${currentIndex * slideWidth}px)`;
      }

      indicators.forEach((indicator, index) => {
        if (index === currentIndex) {
          indicator.classList.add('bg-primary-500', 'dark:bg-primary-500');
        } else {
          indicator.classList.remove('bg-primary-500', 'dark:bg-primary-500');
        }
      });
    }

    /**
     * Move the carousel to the specified slide index
     * @param {number} targetIndex - The index to move to
     */
    function moveToSlide(targetIndex) {
      if (targetIndex < 0) targetIndex = slides.length - visibleSlides;
      if (targetIndex > slides.length - visibleSlides) targetIndex = 0;
      currentIndex = targetIndex;
      updateCarousel();
    }

    if (nextButton) {
      nextButton.addEventListener('click', () => {
        moveToSlide(currentIndex + 1);
      });
    }

    if (prevButton) {
      prevButton.addEventListener('click', () => {
        moveToSlide(currentIndex - 1);
      });
    }

    indicators.forEach((indicator, index) => {
      indicator.addEventListener('click', () => {
        moveToSlide(index);
      });
    });
    setInterval(() => {
      moveToSlide(currentIndex + 1);
    }, 5000);

    // Initial position
    updateCarousel();
  });
</script>
