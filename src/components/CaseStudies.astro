---
import { getCollection } from 'astro:content';

// Get all case studies from the content collection
const caseStudiesCollection = await getCollection('case-studies');

// Get featured case studies or the most recent ones if there are no featured ones
let featuredCaseStudies = caseStudiesCollection.filter(study => study.data.featured);

// If no featured case studies, get the 3 most recent ones
if (featuredCaseStudies.length === 0) {
  featuredCaseStudies = caseStudiesCollection
    .sort((a, b) => new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime())
    .slice(0, 3);
} else if (featuredCaseStudies.length > 3) {
  // If more than 3 featured case studies, take only the 3 most recent
  featuredCaseStudies = featuredCaseStudies
    .sort((a, b) => new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime())
    .slice(0, 3);
}

// Map the case studies to the format needed by the component
const caseStudies = featuredCaseStudies.map(study => ({
  title: study.data.title,
  client: study.data.client,
  description: study.data.description,
  image: study.data.image || '/images/case-study-placeholder.jpg',
  tags: study.data.services || [],
  link: `/case-studies/${study.slug}`,
}));
---

<section id="case-studies" class="py-20 bg-gray-50 dark:bg-gray-800 relative overflow-hidden">
  <!-- Background pattern -->
  <div class="absolute inset-0 bg-grid-pattern opacity-5 dark:opacity-3"></div>

  <!-- Decorative elements -->
  <div class="absolute -bottom-20 -right-20 size-96 bg-accent-100 dark:bg-accent-900/20 rounded-full opacity-30 blur-3xl"></div>
  <div class="absolute -top-20 -left-20 size-96 bg-primary-100 dark:bg-primary-900/20 rounded-full opacity-30 blur-3xl"></div>

  <div class="container mx-auto px-4 sm:px-6 lg:px-8 relative z-10">
    <div class="text-center max-w-3xl mx-auto mb-20">
      <!-- Section label -->
      <div class="inline-flex items-center px-3 py-1 mb-4 text-xs font-medium rounded-full bg-accent-100 text-accent-800 dark:bg-accent-900/30 dark:text-accent-300">
        <span class="size-2 bg-accent-500 rounded-full mr-2"></span>
        Case Studies
      </div>

      <h2 class="text-3xl md:text-4xl font-bold text-gray-900 dark:text-white mb-6 tracking-tight">
        <span class="gradient-text">Proven</span> Results for Industry Leaders
      </h2>

      <div class="w-20 h-1 bg-gradient-to-r from-accent-500 to-primary-500 mx-auto mb-6 rounded-full"></div>

      <p class="text-xl text-gray-600 dark:text-gray-400 leading-relaxed">
        We've delivered measurable ROI for enterprises across industries through our AI-powered solutions.
      </p>
    </div>

    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
      {caseStudies.map((study, index) => (
        <div class="bg-white dark:bg-gray-900 rounded-xl overflow-hidden shadow-md hover:shadow-xl transition-all duration-300 border border-gray-100 dark:border-gray-700 group interactive" data-index={index}>
          <!-- Image with overlay -->
          <div class="h-56 bg-gray-300 dark:bg-gray-700 relative overflow-hidden">
            <!-- Placeholder image -->
            <div class="absolute inset-0 flex items-center justify-center text-gray-500 dark:text-gray-400 group-hover:scale-110 transition-transform duration-500">
              <svg xmlns="http://www.w3.org/2000/svg" class="size-16" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
              </svg>
            </div>

            <!-- Gradient overlay -->
            <div class="absolute inset-0 bg-gradient-to-t from-gray-900/80 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>

            <!-- Client logo (positioned at bottom) -->
            <div class="absolute bottom-4 left-4 text-white font-medium opacity-0 group-hover:opacity-100 transition-opacity duration-300 transform translate-y-4 group-hover:translate-y-0">
              {study.client}
            </div>
          </div>

          <div class="p-8">
            <!-- Client name (visible when not hovering) -->
            <div class="text-sm text-gray-500 dark:text-gray-400 mb-2 group-hover:text-primary-500 dark:group-hover:text-primary-400 transition-colors">
              {study.client}
            </div>

            <h3 class="text-xl font-bold text-gray-900 dark:text-white mb-3 group-hover:text-primary-600 dark:group-hover:text-primary-400 transition-colors">
              {study.title}
            </h3>

            <p class="text-gray-600 dark:text-gray-400 mb-4 line-clamp-3">
              {study.description}
            </p>

            <!-- Results metrics (new) -->
            <div class="grid grid-cols-2 gap-4 mb-6">
              <div class="text-center p-2 bg-gray-50 dark:bg-gray-800 rounded-lg">
                <div class="text-lg font-bold text-primary-600 dark:text-primary-400">+{30 + index * 10}%</div>
                <div class="text-xs text-gray-500 dark:text-gray-400">Efficiency</div>
              </div>
              <div class="text-center p-2 bg-gray-50 dark:bg-gray-800 rounded-lg">
                <div class="text-lg font-bold text-accent-600 dark:text-accent-400">{2 + index}.5x</div>
                <div class="text-xs text-gray-500 dark:text-gray-400">ROI</div>
              </div>
            </div>

            <!-- Tags -->
            <div class="flex flex-wrap gap-2 mb-6">
              {study.tags.map((tag) => (
                <span class="px-2 py-1 bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-400 rounded-full text-xs font-medium">
                  {tag}
                </span>
              ))}
            </div>

            <a
              href={study.link}
              class="inline-flex items-center text-primary-600 dark:text-primary-400 hover:text-primary-800 dark:hover:text-primary-300 font-medium group-hover:translate-x-1 transition-transform"
            >
              View Case Study
              <svg xmlns="http://www.w3.org/2000/svg" class="size-5 ml-1" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M12.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-2.293-2.293a1 1 0 010-1.414z" clip-rule="evenodd" />
              </svg>
            </a>
          </div>
        </div>
      ))}
    </div>

    <div class="text-center mt-16">
      <a href="/case-studies" class="btn btn-outline interactive px-8 py-4">
        View All Case Studies
        <svg xmlns="http://www.w3.org/2000/svg" class="size-5 ml-2" viewBox="0 0 20 20" fill="currentColor">
          <path fill-rule="evenodd" d="M10.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L12.586 11H5a1 1 0 110-2h7.586l-2.293-2.293a1 1 0 010-1.414z" clip-rule="evenodd" />
        </svg>
      </a>
    </div>
  </div>
</section>

<style>
  .bg-grid-pattern {
    background-image: url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%239C92AC' fill-opacity='0.2'%3E%3Cpath d='M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E");
  }
</style>

<script>
  // Staggered animation for case study cards
  document.addEventListener('DOMContentLoaded', () => {
    const caseStudyCards = document.querySelectorAll('#case-studies .grid > div');

    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry, i) => {
        if (entry.isIntersecting) {
          // Get the data-index attribute to determine the delay
          const index = parseInt(entry.target.getAttribute('data-index') || '0');
          const delay = index * 100; // 100ms delay between each card

          setTimeout(() => {
            entry.target.classList.add('animate-fade-in');
          }, delay);

          observer.unobserve(entry.target);
        }
      });
    }, { threshold: 0.1 });

    caseStudyCards.forEach(card => {
      observer.observe(card);
    });
  });
</script>
