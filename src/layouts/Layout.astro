---
import '../styles/main.css';
import SEO from '../components/SEO.astro';

export interface Props {
  title?: string;
  description?: string;
  canonical?: string;
  noindex?: boolean;
  nofollow?: boolean;
  ogTitle?: string;
  ogDescription?: string;
  ogImage?: string;
  twitterTitle?: string;
  twitterDescription?: string;
  twitterImage?: string;
}

const {
  title = 'AppVin Technologies | Top-Rated Software Development Company',
  description = 'AppVin Technologies is a top-notch software development company that designs, develops, and implements IT technology solutions for startups, small businesses and established enterprises.',
  canonical,
  noindex,
  nofollow,
  ogTitle,
  ogDescription,
  ogImage,
  twitterTitle,
  twitterDescription,
  twitterImage,
} = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/png" href="/images/appvin-logo.png" />
    <SEO
      title={title}
      description={description}
      canonical={canonical}
      noindex={noindex}
      nofollow={nofollow}
      ogTitle={ogTitle}
      ogDescription={ogDescription}
      ogImage={ogImage}
      twitterTitle={twitterTitle}
      twitterDescription={twitterDescription}
      twitterImage={twitterImage}
    />
    <script is:inline>
      // Check for dark mode preference with system theme as default
      const theme = (() => {
        if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
          // If user has explicitly set a theme preference, use that
          return localStorage.getItem('theme');
        }
        // Otherwise, use system preference (this is the default)
        return 'system';
      })();

      // Apply the theme
      if (theme === 'dark' || (theme === 'system' && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
        document.documentElement.classList.add('dark');
      } else {
        document.documentElement.classList.remove('dark');
      }

      // Store the current theme for reference
      window.currentTheme = theme;
    </script>
  </head>
  <body>
    <slot />
    <script>
      // Handle theme toggle with system preference support
      document.addEventListener('DOMContentLoaded', () => {
        const themeToggle = document.getElementById('theme-toggle');

        // Function to update theme icons visibility
        const updateThemeIcons = (theme) => {
          const sunIcon = document.querySelectorAll('.theme-sun');
          const moonIcon = document.querySelectorAll('.theme-moon');
          const systemIcon = document.querySelectorAll('.theme-system');

          sunIcon.forEach(icon => icon.classList.add('hidden'));
          moonIcon.forEach(icon => icon.classList.add('hidden'));
          systemIcon.forEach(icon => icon.classList.add('hidden'));

          if (theme === 'light') {
            sunIcon.forEach(icon => icon.classList.remove('hidden'));
          } else if (theme === 'dark') {
            moonIcon.forEach(icon => icon.classList.remove('hidden'));
          } else {
            systemIcon.forEach(icon => icon.classList.remove('hidden'));
          }
        };

        // Initialize theme icons
        updateThemeIcons(window.currentTheme || 'system');

        // Handle theme toggle click
        if (themeToggle) {
          themeToggle.addEventListener('click', () => {
            // Cycle through themes: system -> light -> dark -> system
            const currentTheme = window.currentTheme || 'system';
            let newTheme;

            if (currentTheme === 'system') {
              newTheme = 'light';
            } else if (currentTheme === 'light') {
              newTheme = 'dark';
            } else {
              newTheme = 'system';
            }

            // Update theme
            window.currentTheme = newTheme;
            localStorage.setItem('theme', newTheme);

            // Apply theme
            if (newTheme === 'dark' || (newTheme === 'system' && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
              document.documentElement.classList.add('dark');
            } else {
              document.documentElement.classList.remove('dark');
            }

            // Update icons
            updateThemeIcons(newTheme);
          });
        }

        // Listen for system theme changes
        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
          if (window.currentTheme === 'system') {
            if (e.matches) {
              document.documentElement.classList.add('dark');
            } else {
              document.documentElement.classList.remove('dark');
            }
          }
        });
      });
    </script>
  </body>
</html>
